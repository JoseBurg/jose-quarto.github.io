[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "José Burgos",
    "section": "",
    "text": "Domina la estética con ggplot2\n\n\n\n\n\n\n\n\n\n\n\nDec 25, 2024\n\n\nJosé Burgos\n\n\n\n\n\n\n\n\n\n\n\n\nObtener datos desde una fuente remota\n\n\n\n\n\n\n\n\n\n\n\nMar 2, 2024\n\n\nJosé Burgos\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/apis-combustible/apis.html",
    "href": "posts/apis-combustible/apis.html",
    "title": "Apis Digital Gob",
    "section": "",
    "text": "En esta ocacion estaremos descargando los precios de los combustible de República Dominicana desde la apis del portal de datos abiertos del gobierno dominicano. Utilizaremos el paquete httr para realizar la petición a la API y la función de cbind_rows del paquete dplyr para convertir la lista de resultados en un dataframe.\nEl precio de los combustible son actualizados cada semana, por lo que la data tiene una frecuencia semanal, el precio es publicado el viernes de cada semana, pero se aplica a partir de las doces de la noche, por lo que la observación de los precios es a partir del sábado de cada semana. Por lo tanto, si queremos obtener los precios de los combustibles para una fecha específica, debemos asegurarnos de que esta fecha sea un sábado."
  },
  {
    "objectID": "posts/apis-combustible/apis.html#que-son-y-como-funcionan-las-apis",
    "href": "posts/apis-combustible/apis.html#que-son-y-como-funcionan-las-apis",
    "title": "Apis Digital Gob",
    "section": "Que son y como funcionan las Apis?",
    "text": "Que son y como funcionan las Apis?\nLas APIs (Application Programming Interfaces) son conjuntos de reglas y protocolos que permiten la comunicación entre diferentes aplicaciones. En el caso de las APIs web, estas permiten que una aplicación pueda solicitar datos a otra aplicación a través de internet.\nEn R, las APIs se pueden utilizar para obtener datos de diferentes fuentes, como bases de datos, servicios web, etc. Para utilizar una API en R, se necesita conocer la URL de la API y los parámetros que se deben enviar en la solicitud.\n\nFunción y paquetes\nLa función GET del paquete httr se utiliza para realizar una solicitud HTTP GET a una URL específica. Esta función devuelve un objeto de respuesta que contiene el contenido de la respuesta, el código de estado HTTP y otros metadatos.\nPasos:\n\nInstalar y cargar los paquetes necesarios.\nRealizar la solicitud a la API utilizando la función GET.\nExtraer el contenido de la respuesta utilizando la función content.\nAcceder a los datos específicos de la respuesta.\nConvertir la respuesta de lista a dataframe.\n\n\n\nShow the code\n# Necesitamos realizar la consulta con la fecha:\ndate &lt;- \"2023-10-01\" # Fecha de los precios de los combustibles\nlink &lt;- paste0(\"https://api.digital.gob.do/v1/fuels?date=\", date)\n\n# Hacemos la solicitud a la API de la DGII\nprecios &lt;- httr::GET(link)\n\n# Extraemos el contenido de la solicitud\nrespuesta &lt;- httr::content(x = precios) # Esto devuelve un objeto de tipo lista\n\n# Accedemos a la sección de datos\nresultados &lt;- respuesta[[\"data\"]] # El resultado es una lista de precios de combustibles\n\n\nEn el código anterior, primero definimos la fecha para la cual queremos obtener los precios de los combustibles. Luego, construimos la URL de la API utilizando esa fecha. A continuación, utilizamos la función GET del paquete httr para realizar la solicitud a la API. Finalmente, extraemos el contenido de la respuesta y accedemos a los datos específicos que nos interesan.\nEl resultado es una lista con la siguiente estructura:\n\n\nShow the code\nresultados[[1]]\n\n\n$id\n[1] 15811\n\n$name\n[1] \"Gasolina Premium\"\n\n$code\n[1] \"PGACU00\"\n\n$currency\n[1] \"DOP\"\n\n$price\n[1] \"293.10\"\n\n$date\n[1] \"2023-09-30\"\n\n\nLa lista contiene información sobre los precios de diferentes combustibles, incluyendo el nombre del combustible, el precio por galón y la fecha de actualización.\nAhora convertiremos esta lista en un dataframe para facilitar su análisis. Utilizaremos la función bind_rows del paquete dplyr para combinar los elementos de la lista en un único dataframe.\n\n\nShow the code\ncombustibles &lt;- dplyr::bind_rows(resultados) # Convertimos la lista en un dataframe\n\ncombustibles |&gt; \n  dplyr::glimpse()\n\n\nRows: 19\nColumns: 6\n$ id       &lt;int&gt; 15811, 15812, 15813, 15814, 15815, 15816, 15817, 15818, 15819…\n$ name     &lt;chr&gt; \"Gasolina Premium\", \"Gasolina Regular\", \"Gasoil Regular\", \"Ga…\n$ code     &lt;chr&gt; \"PGACU00\", \"PGAIX00\", \"POAEE00\", NA, NA, NA, NA, \"AATGZ00\", \"…\n$ currency &lt;chr&gt; \"DOP\", \"DOP\", \"DOP\", \"DOP\", \"DOP\", \"DOP\", \"DOP\", \"DOP\", \"DOP\"…\n$ price    &lt;chr&gt; \"293.10\", \"274.50\", \"221.60\", \"253.26\", \"247.58\", \"253.26\", \"…\n$ date     &lt;chr&gt; \"2023-09-30\", \"2023-09-30\", \"2023-09-30\", \"2023-09-30\", \"2023…\n\n\nSi queremos pasar a un nivel más avanzados, creamos una función que nos permita obtener los precios de los combustibles para cualquier fecha que le indiquemos.\n\nCreando una función para obtener precios de combustibles\n\n\nShow the code\nget_combustibles &lt;- function(date) {\n  link &lt;- paste0(\"https://api.digital.gob.do/v1/fuels?date=\", date)\n  \n  precios &lt;- httr::GET(link)\n  respuesta &lt;- httr::content(x = precios)\n  resultados &lt;- respuesta[[\"data\"]]\n  combustibles &lt;- dplyr::bind_rows(resultados)\n  \n  return(combustibles)\n}\n\n\nResulta que si utilizamos la función get_combustibles con una fecha y esta no corresponde a una fecha que no coincide con un sábado, la API nos devolverá los datos que estén más cercanos a esta fecha. Por lo tanto, es importante asegurarnos de que la fecha que pasamos a la función sea el sexto día de la semana.Para obtener un histórico de precios de los combustibles, podemos generar una secuencia de fechas semanales.\nVamos a crear una función la cual nos de una fecha desde el primer sábado de enero de un año, y luego utilizaremos esta función para generar una secuencia de fechas semanales. Posteriormente, aplicaremos la función get_combustibles a cada una de estas fechas para obtener los precios correspondientes.\n\n\nShow the code\nlibrary(dplyr)\n # Calcula el primer sabado de enero de cada año\nget_first_friday &lt;- function(year) {\n  first_week &lt;- as.Date(paste0(year, \"-01-01\")) + \n    (6 - as.POSIXlt(paste0(year, \"-01-01\"))$wday)\n  \n  return(first_week)\n}\n\nfechas &lt;- seq(\n  get_first_friday(2012), \n  Sys.Date(), \n  by = \"week\" # Generamos una secuencia de fechas semanales\n) \n\ncombustibles &lt;- lapply(fechas, get_combustibles) # Aplicamos la función a cada fecha\n# Convertimos la lista de dataframes en un único dataframe\nhistorico_fuels &lt;- dplyr::bind_rows(combustibles) # Unimos todos los dataframes en uno solo\n\n# Vamos a obtener el precio de la última semana de cada mes:\ncombustibles_months &lt;- historico_fuels |&gt;\n  mutate(\n    fecha = as.Date(date), # Convertimos la columna fecha a tipo Date\n    price = as.numeric(price) # Convertimos la columna price a tipo numérico\n  ) |&gt; \n  group_by(\n    mes = lubridate::floor_date(fecha, \"month\"),\n    name # Agrupamos por mes y nombre del combustible\n  ) |&gt; \n  slice_tail(n = 1) |&gt; # Obtenemos el precio de la última semana de cada mes\n  ungroup() |&gt; \n  select(-fecha)\n\n\n\n\nVisualización de los precios de los combustibles\n\n\nShow the code\nlibrary(ggplot2)\ncombustibles_months |&gt; \n  filter(stringr::str_detect(name, \"Gasolina Premium|Gasoil Optimo\")) |&gt;\n  ggplot(aes(x = mes, y = price, color = name)) +\n    geom_line() +\n    labs(title = \"Precios de Combustibles en República Dominicana\",\n         x = \"Mes\",\n         y = \"Precio (RD$)\",\n         color = NULL) +\n    theme_minimal() +\n    scale_x_date(date_labels = \"%Y-%m\", date_breaks = \"1 year\") +\n  theme(\n    legend.position = c(.8, 0.5), # Posición de la leyenda\n  )\n\n\n\n\n\n\n\n\n\n\n\nTabla de precios en los últimos años\n\n\nShow the code\n# Vamos a crear una función para obtener el primer viernes de la primera semana de enero de un año"
  }
]