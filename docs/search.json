[
  {
    "objectID": "posts/getSymbols/getsymbols.html",
    "href": "posts/getSymbols/getsymbols.html",
    "title": "Obtener datos desde una fuente remota",
    "section": "",
    "text": "Cuando iniciamos a trabajar con R, es común que analicemos datos en formatos Excel que descargamos en nuestro ordenador. Con el paso del tiempo, esta tarea se convierte en una rutina que puede volverse tediosa, especialmente cuando lidiamos con grandes cantidades de datos que ralentizan el procesamiento y consumen una cantidad considerable de memoria de nuestra computadora.\nImagina la posibilidad de descargar bases de datos de forma remota, seleccionando únicamente los datos necesarios para tu análisis y evitando cargar información que no te interese. Para hacer esto, el paquete quantmod proporciona una función llamada getSymbols, que permite la descarga de datos desde páginas web.\nAl utilizar getSymbols, puedes simplificar y automatizar el proceso de adquisición de datos, lo que te brinda la flexibilidad de trabajar con conjuntos de datos sin comprometer el rendimiento de tu computadora. Esta función te libera de la carga de descargar manualmente archivos y te permite concentrarte en el análisis y la interpretación de los datos relevantes para tu investigación o proyecto.\nPaquetes: quantmod tidyverse zoo gt"
  },
  {
    "objectID": "posts/getSymbols/getsymbols.html#introducción",
    "href": "posts/getSymbols/getsymbols.html#introducción",
    "title": "Obtener datos desde una fuente remota",
    "section": "",
    "text": "Cuando iniciamos a trabajar con R, es común que analicemos datos en formatos Excel que descargamos en nuestro ordenador. Con el paso del tiempo, esta tarea se convierte en una rutina que puede volverse tediosa, especialmente cuando lidiamos con grandes cantidades de datos que ralentizan el procesamiento y consumen una cantidad considerable de memoria de nuestra computadora.\nImagina la posibilidad de descargar bases de datos de forma remota, seleccionando únicamente los datos necesarios para tu análisis y evitando cargar información que no te interese. Para hacer esto, el paquete quantmod proporciona una función llamada getSymbols, que permite la descarga de datos desde páginas web.\nAl utilizar getSymbols, puedes simplificar y automatizar el proceso de adquisición de datos, lo que te brinda la flexibilidad de trabajar con conjuntos de datos sin comprometer el rendimiento de tu computadora. Esta función te libera de la carga de descargar manualmente archivos y te permite concentrarte en el análisis y la interpretación de los datos relevantes para tu investigación o proyecto.\nPaquetes: quantmod tidyverse zoo gt"
  },
  {
    "objectID": "posts/getSymbols/getsymbols.html#getsymbols",
    "href": "posts/getSymbols/getsymbols.html#getsymbols",
    "title": "Obtener datos desde una fuente remota",
    "section": "getSymbols",
    "text": "getSymbols\nEsta función necesita algunas información esenciales de la data que se necesita descargar, como el símbolo de los datos y el nombre de la pagina donde se encuentra la data.\n\nEstructura de la función getSymbols:\nEn esta caso vamos a descargar los datos del Índice de Precios al Consumidor de Estados Unidos desde la página principal de la Federal Reserve Economic Data, con los siguientes parámetros:\n\ngetSymbols(\n  Symbols =  \"USACPALTT01CTGYM\",\n  src = \"FRED\",\n  from = \"2012-01-01\",\n  to = \"2024-02-01\",\n  format = \"xts\",\n  periodicity = \"monthly\"\n)\n\n[1] \"USACPALTT01CTGYM\"\n\n\n\n\n\n\n\n\nNota\n\n\n\nDependiendo de la pagina que vayas a descargar pueden variar la estructura de la función, pueden consultar con ?getSymbols().\n\n\nLo primero que tenemos es el Symbols, este especifica el identificador del conjunto de datos que deseamos obtener. En este caso, USACPALTT01CTGYM se refiere a los Índices de precios al consumidor (IPC, IPCA), COICOP 1999: Índice de precios al consumidor: Total para Estados Unidos en unidades de contribución a la tasa de crecimiento, en 1 año, sin desestacionalizar. Estos identificadores lo podemos encontrar al lado del nombre cuando visitamos la página principal de la FRED. Especificamos la fuente con src, en este caso, “FRED”. Luego, definimos el rango de fechas con from y to, que indican el periodo de tiempo que deseamos descargar. Por último, especificamos el formato de los datos con format y la periodicidad con periodicity.\nPor defecto el conjunto de datos que descargamos se guardara con el nombre del símbolo que utilizamos, algunas informaciones de la data descargada se pueden ver con el siguiente código:\n\ndplyr::glimpse(USACPALTT01CTGYM)\n\nAn xts object on 2012-01-01 / 2024-02-01 containing: \n  Data:    double [146, 1]\n  Columns: USACPALTT01CTGYM\n  Index:   Date [146] (TZ: \"UTC\")\n  xts Attributes:\n    $ src    : chr \"FRED\"\n    $ updated: POSIXct[1:1], format: \"2024-05-26 14:40:54\"\n\n\n\n\nManipulación y visualización de los datos\nVamos hacer algunos ajuste para que nuestro conjunto de datos sea más amigables1 para las visualizaciones y luego pasamos a calcular algunas estadísticas descriptivas de los datos descargados.\n\nPaso 1Paso 2\n\n\n\nipc_usa &lt;- zoo::fortify.zoo(# Convertimos a data.frame\n                 USACPALTT01CTGYM) |&gt; \n               setNames(# asignamos nombres fácil de identificar\n                 c(\"periodo\", \"ipc\")) |&gt; \n                mutate(across(ipc, ~round(.x, digits = 2)))\nipc_usa |&gt; \n  tail(n = 3) |&gt; \n  gt::gt()\n\n\n\n\n\n  \n    \n      periodo\n      ipc\n    \n  \n  \n    2023-12-01\n3.26\n    2024-01-01\n3.08\n    2024-02-01\n3.03\n  \n  \n  \n\n\n\n\n\n\nSiempre es bueno explorar algunas estadísticas descriptivas de nuestros datos, para tener una idea general de la información que estamos trabajando:\n\nipc_usa |&gt; \n  mutate(\n    Covid = ifelse(periodo &gt;= \"2020-01-01\", \"Covid\", \"Pre-Covid\")) |&gt; \n  summarise(across(ipc, list(\n    Promedio = mean, Minimo = min, \n    Maximo = max),\n    .names = \"{.fn}\"),\n    .by = Covid) |&gt; \n  gt() |&gt; tab_header(\n    title = \"IPC de USA\",\n    subtitle = \"Datos de enero 2012 a febrero 2024\")\n\n\n\n\n\n  \n    \n      IPC de USA\n    \n    \n      Datos de enero 2012 a febrero 2024\n    \n    \n      Covid\n      Promedio\n      Minimo\n      Maximo\n    \n  \n  \n    Pre-Covid\n1.580417\n-0.23\n2.90\n    Covid\n4.414400\n0.05\n8.97\n  \n  \n  \n\n\n\n\n\n\n\nTomando en consideración las estadísticas de la tabla anterior, crearemos las variables que vamos a usar para resaltar algunos puntos en el gráfico:\n\nipc_usa_est &lt;- ipc_usa |&gt;\n  mutate(\n    max_ipc = ifelse(ipc == max(ipc), ipc, NA),               # Máximo covid\n    min_ipc_covid = ifelse(periodo == \"2020-05-01\", ipc, NA)) # Mínimo covid\n\nPara gráficar los datos, vamos a utilizar la librería ggplot2 y agregar informaciones para resaltar algunos puntos importantes en el gráfico:\nInicio de la pandemia:\n\n\nCódigo\ngraph_ipc_usa &lt;- ipc_usa_est |&gt;\n  ggplot(aes(x = periodo, y = ipc)) +\n   geom_rect(aes(\n     xmin = as.Date(\"2020-01-01\"),  # Inicio de pandemia\n     xmax = as.Date(\"2021-12-31\"), \n     ymin = -Inf, ymax = Inf),\n     fill = \"#8d99ae\") +\n   geom_line(color = \"black\", size = 1)\n\n\nVamos agregar más información al gráfico, con algunas anotaciones:\n\ngraph_ipc_usa &lt;- graph_ipc_usa + \n  # Promedio pre-covid\n  geom_hline(yintercept = 1.58, color = \"#5f1a37\", linetype = \"dashed\", size = 0.6) +\n  annotate(\"text\", x = as.Date(\"2022-12-1\"), y = 1.9, label = \"Promerdio 2012-2020\",\n           color = \"#5f1a37\",size = 2.9) +\n  # Mínimo covid\n  geom_text(aes(\n     periodo, min_ipc_covid, label = paste0(min_ipc_covid, \" (May-2020)\")),\n     vjust = 1, hjust = .1, color = \"#0d00a4\", size = 2.5) +\n  # Máximo covid\n   geom_text(aes(\n     periodo, max_ipc, label = paste0(max_ipc, \" (Jun-2022)\")),\n     vjust = -0.3, hjust = .1, color = \"red\", size = 2.5)\n\nPor último, se mejora el diseño del gráfico predeterminado:\n\n\nCódigo\n(graph_ipc_usa &lt;- graph_ipc_usa +\n  # Escala de fecha\n   scale_x_date(date_labels = \"%b %Y\", date_breaks = \"2 year\") +        \n  # Titulos:\n   labs(\n      title = \"Índice de Precios al Consumidor (IPC) de USA\",\n      subtitle = \"Datos de enero 2012 a febrero 2024\",\n      x = \"Periodo\",\n      y = \"IPC\", \n      caption = \"Fuente: FRED\") +\n  theme_bw()) # Tema de gráfico"
  },
  {
    "objectID": "posts/getSymbols/getsymbols.html#observaciones",
    "href": "posts/getSymbols/getsymbols.html#observaciones",
    "title": "Obtener datos desde una fuente remota",
    "section": "Observaciones",
    "text": "Observaciones\nComo se puede observar en el gráfico, los paros de movilidad y la disminución de la demanda a nivel global producto de la pandemia de COVID-19, provoco que el IPC de Estados Unidos experimentara comportamiento inusuales, donde este logra alcanzar un valor de 0.05 en mayo de 2020, y después inicia un periodo de aumento que se extiende hasta junio del 2022, en el que alcanza su valor máximo2 de 9.0%. Aunque la Reserva Federal ha trabajado arduamente para lograr la disminución que se ha evidenciado en los últimos meses, el IPC aún no ha llegado a los niveles previos a la pandemia."
  },
  {
    "objectID": "posts/getSymbols/getsymbols.html#consideraciones-finales-de-getsymbols",
    "href": "posts/getSymbols/getsymbols.html#consideraciones-finales-de-getsymbols",
    "title": "Obtener datos desde una fuente remota",
    "section": "Consideraciones finales de getSymbols",
    "text": "Consideraciones finales de getSymbols\nLas diferentes formas de usar la función getSymbols del paquete quantmod permiten a los analista de datos personalizar la descarga masiva de datos según lo requiera. Pero se debe tener en cuenta que en algunos casos las fechas solicitadas no estarán disponibles, el formato de los datos descargados puede no ser el adecuado para el análisis que se va a realizar, o en el caso de algunas variables, la periodicidad deseada de los datos puede que no este disponible.\nHasta el momento los sitios web que se suelen descargar datos son:\n Yahoo Finance\n Google Finance\n FRED\n Oanda\nLos formatos de datos más comunes que se pueden descargar son de series de tiempo, como xts y zoo.\nLas periodicidades que se pueden descargar va a depender mucho del tipo de variable que se quiera descargar, estas van desde diarias hasta anuales."
  },
  {
    "objectID": "posts/getSymbols/getsymbols.html#footnotes",
    "href": "posts/getSymbols/getsymbols.html#footnotes",
    "title": "Obtener datos desde una fuente remota",
    "section": "Notas",
    "text": "Notas\n\n\nSe recomienda utilizar nombres de variables que sean fáciles de recordar y que tengan sentido para nosotros. Es más fácil recordar el nombre de un objeto donde su nombre lo describa, de seguro recodara más rápido el IPC de USA con ipc_usa en vez de USACPALTT01CTGYM.↩︎\nMáximo de la serie observada.↩︎"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "José",
    "section": "",
    "text": "Hola, mi nombre es José Burgos. Soy un joven economista apasionado por la ciencia de datos y la programación en RStudio. Te invito a visitar mi blog personal, donde comparto técnicas de ciencia de datos y análisis económicos, principalmente utilizando modelos econométricos."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "José Burgos",
    "section": "",
    "text": "APis\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nGráficos elegantes\n\n\n\n\n\n\n\n\n\n\n\n\nJosé Burgos\n\n\n\n\n\n\n  \n\n\n\n\nObtener datos desde una fuente remota\n\n\n\n\n\n\n\n\n\n\n\n\nMar 2, 2024\n\n\nJosé Burgos\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/apis/APIs.html",
    "href": "posts/apis/APIs.html",
    "title": "APis",
    "section": "",
    "text": "Introducción\nUna API, o Interfaz de Programación de Aplicaciones (por sus siglas en inglés, Application Programming Interface), es un conjunto de reglas y protocolos que permiten que diferentes aplicaciones informáticas se comuniquen entre sí. Estas reglas determinan cómo los componentes de software deben interactuar, qué datos pueden solicitar y cómo deben interpretar las respuestas.\nLas APIs son esenciales para los analistas de datos porque les proporcionan acceso a datos de diversas fuentes, les permiten automatizar tareas, integrar información, realizar análisis avanzados y visualizar resultados. Esto les ayuda a tomar decisiones informadas y a extraer insights valiosos de los datos, lo que puede tener un impacto significativo en la toma de decisiones empresariales y estratégicas.\nEn este artículo, exploraremos la conexión a la base de datos de la Superintendencia de Bancos de la República Dominicana a través de su API. Nuestro objetivo principal será extraer datos relacionados con las captaciones por regiones. Posteriormente, llevaremos a cabo diversas manipulaciones y visualizaciones con el propósito de realizar un análisis detallado de estos bancos.\n\nElementos necesarios para conectar a una API:\n\nAcceso a la Documentación\nClaves de Autenticación\nHerramientas de Desarrollo\nConexión a Internet\nManejo de Respuestas\n\n\nlibrary(httr)\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.3.2\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\nlibrary(tidytext)\n\nlink &lt;- \"https://apis.sb.gob.do/estadisticas/v2/carteras/creditos/genero?periodoInicial=2021-01\"\nsubscription_key &lt;- \"bRhDMj4xQCQw9cG\"\nresponse &lt;- GET(link, add_headers(`Subscription-Key` = subscription_key))\n\njson_content &lt;- content(response, \"text\", encoding = \"UTF-8\")\ncaptaciones &lt;- jsonlite::fromJSON(json_content)\n\n\n# captaciones |&gt; \n#   # group_by(region) |&gt; \n#   mutate(\n#     total = sum(balance),\n#     entidad = as.factor(entidad),\n#     orden = reorder_within(entidad, total, region)) |&gt; \n#   ggplot() + \n#   geom_col(\n#     aes(x = total/1000000, y = orden), \n#     show.legend = FALSE) +\n#   labs(x = \"\", y = \"\") +\n#   facet_wrap(~region, scales = \"free_y\") +\n#   scale_y_reordered()\n\nPasos para registrarse en la APis de la Super de Bancos\nA la hora de acceder a las estadísticas del sistema financiero, se recomienda ir la versión 2, ya que la uno será descontinuada. \nLuego de elegir la variable deseada que se descargara, es importante verificar los parámetros y sus características, ademas de consultar cuales de esos parámetros serán obligatorios o no. Como se ve en la siguiente imagen, la super nos proporciona un resumen detallados de los para metros a utilizar:\n\nSegún los detalles de la imagen anterior, solo se requiere colocar el periodo inicial para poder descargar los datos, aunque podemos filtrar con los demás.\nLuego de elegir los filtros o parametros que tendra nuestra data la pagina nos generará un link con la siguiente estructura:"
  },
  {
    "objectID": "posts/graficos/RD_exportaciones_importaciones.html",
    "href": "posts/graficos/RD_exportaciones_importaciones.html",
    "title": "Gráficos elegantes",
    "section": "",
    "text": "Muchas personas no suelen dedicar tiempo a la estética de los gráficos al realizar análisis en RStudio, y es comprensible. Mejorar la apariencia de un gráfico, especialmente cuando se utiliza ggplot2, puede ser una tarea que requiere tiempo, y a menudo, no se percibe como una prioridad. Sin embargo, la presentación visual es clave para comunicar resultados de manera efectiva. Por eso, en este blog comenzaré a compartir algunas ideas y ajustes que puedes implementar en tus gráficos con ggplot2 para elevar la calidad de tus reportes.\nEn esta publicación, utilizaremos el paquete databcrd, desarrollado por Johan Rosa1, una figura destacada en la programación con R en RD. Este paquete, disponible en su perfil de GitHub (“Johan-rosa/databcrd”), es sencillo de instalar y usar. Su principal propósito es permitir la descarga remota y en tiempo real de datos del Banco Central de la República Dominica. Además, estos datos están adaptados para facilitar su uso en análisis realizados en RStudio.\nCon estos pasos puede utilizar el paquete databcrd:\n\nInstalar el paquete devtools.\nEjecutar en la consola devtools::install_github(\"Johan-rosa/databcrd\", force = TRUE)\n\nLuego de instalar el paquete solo es cargarlo o llamarlo de manera explicita, esta última es la que usaremos en este post para que el lector conozca mejor las funciones.\nVamos a descargar el PIB de República Dominicana, con la función get_pib_gasto , los parámetros determinados son los siguientes:\n\n\nCode\nlibrary(tidyverse)\npib_gasto &lt;- databcrd::get_pib_gasto(\n  modalidad = \"nominal\", \n  acumulado = FALSE, \n  homogenea_91 = FALSE\n)\n\nexportaciones_importaciones &lt;-  pib_gasto |&gt; \n  filter(\n    partida %in% c(\"Exportaciones\", \"Importaciones\")\n  )\n\n\nNos centraremos en las exportaciones e importaciones para nuestro ejercicio de visualización. Crearemos un gráfico sencillo que muestre su evolución, asegurándonos de incluir los elementos básicos que todo gráfico debe tener: un título claro, la fuente de los datos y las etiquetas correspondientes en los ejes.\n\n\nCode\nplot_bas_exp_impor &lt;- exportaciones_importaciones |&gt; \n  ggplot() +\n  geom_line(aes(fecha, pib_nominal, color = partida), size = .7) +\n  labs(title = \"Exportaciones e importaciones en República Dominicana\",\n       subtitle = \"Evolución desde 2007 hasta 2024 en millones de pesos (RD$)\",\n       caption = \"Fuente: BCRD\", color = NULL,\n       y = \"Millones de pesos\", x = \"Periodo\") +\n  theme_minimal()\n\nplot_bas_exp_impor\n\n\n\n\n\nEn el ejemplo anterior realizamos algunos ajustes básicos al gráfico, pero si deseamos presentarlo a nuestro jefe o a un público más exigente, sería conveniente incorporar algunos cambios adicionales para mejorar su claridad y estética.\nPrimero, notamos que el eje y está en notación científica, lo cual puede no ser muy intuitivo para todos los espectadores. Convertirlo a una escala numérica más legible facilitará su interpretación. Además, dado que los datos tienen una frecuencia trimestral, sería ideal ajustar el eje x para reflejar esta periodicidad de manera más precisa.\nPor otro lado, las etiquetas de las series, “Exportaciones” e “Importaciones”, ocupan un espacio considerable en el gráfico. Existen diversas formas de optimizar esto: podemos colocarlas horizontalmente debajo del eje temporal o, como haremos aquí, incluirlas directamente dentro del gráfico para ahorrar espacio y mejorar la organización visual. Finalmente, los colores predeterminados de ggplot2 no siempre son los más elegantes. Cambiar la paleta de colores ayudará a que el gráfico tenga un aspecto más profesional y atractivo.\n\n\nCode\nplot_avance &lt;- plot_bas_exp_impor + \n  scale_y_continuous(labels = scales::comma) + # Manipulando el eje y\n   scale_x_date( # Eje x\n     labels = \\(x) paste0(\"Q\", quarter(x), \"\\n\", year(x)), # Aquí creamos una función anónima para darle un flow personalizado\n     breaks = \"3.5 year\" # Con esta opción manipulamos los brakes de las fechas\n     ) + \n  scale_color_manual(values = c(\"darkblue\", \"gray65\")) + # Cambiando los colores\n  theme(legend.position = \"bottom\", text = element_text(family = \"Georgia\"))\n\nplot_avance\n\n\n\n\n\nPodemos sombrear en el gráfico después del covid, para enfocar la atención a nuestro publico, como ha evolucionado nuestras variables después del periodo de la pandemia.\nPara esto vamos a filtrar nuestra base de datos en la fecha que nos interesa y cambiar la estructura para que sea más fácil hacer el sombreado.\n\n\nCode\ndata_sobrear_2020 &lt;- exportaciones_importaciones |&gt; \n  filter(fecha &gt; \"2020-01-01\") |&gt; \n  select(fecha, partida, pib_nominal) |&gt; \n  tidyr::pivot_wider(\n    names_from = partida,\n    values_from = pib_nominal\n  )\n\n\n\n\nCode\nplot_avance1 &lt;- plot_avance + \n  geom_ribbon(\n    data = data_sobrear_2020,\n    aes(\n      x = fecha, \n      ymin = Exportaciones, \n      ymax = Importaciones\n    ), \n    fill = \"#748cab\",\n    alpha = 0.3\n    \n  )\nplot_avance1\n\n\n\n\n\nHasta ahora, hemos realizado varias mejoras en nuestro gráfico, pero aún podemos optimizar su apariencia. Una forma de hacerlo es colocando las etiquetas de las series directamente dentro del gráfico. Para lograr esto, utilizaremos la función annotate, que nos permite agregar texto personalizado en posiciones específicas del gráfico. Además, podremos ajustar el tamaño, color y posición del texto para que se integre de manera armoniosa con el diseño general.\n\n\nCode\n# En este caso, como debemos probar varias veces, \n# con algunos ajuste hasta que las anotaciones queden organizada,\n# es de gran ayuda crear una función\nanotaciones &lt;- function(x = \"2016-03-01\", y, label, color){\n  ggplot2::annotate(\"text\", \n    x = as.Date(x), y = y, \n    label = label, size = 3.5, \n    colour = color, angle = 15)\n}\n\nplot_avance1 +\n  anotaciones(y = 18e4, label = \"Exportaciones\", color  = \"darkblue\") +\n  anotaciones(y = 28e4, label = \"Importaciones\", color  = \"gray65\") +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "posts/graficos/RD_exportaciones_importaciones.html#introducción",
    "href": "posts/graficos/RD_exportaciones_importaciones.html#introducción",
    "title": "Gráficos elegantes",
    "section": "",
    "text": "Muchas personas no suelen dedicar tiempo a la estética de los gráficos al realizar análisis en RStudio, y es comprensible. Mejorar la apariencia de un gráfico, especialmente cuando se utiliza ggplot2, puede ser una tarea que requiere tiempo, y a menudo, no se percibe como una prioridad. Sin embargo, la presentación visual es clave para comunicar resultados de manera efectiva. Por eso, en este blog comenzaré a compartir algunas ideas y ajustes que puedes implementar en tus gráficos con ggplot2 para elevar la calidad de tus reportes.\nEn esta publicación, utilizaremos el paquete databcrd, desarrollado por Johan Rosa1, una figura destacada en la programación con R en RD. Este paquete, disponible en su perfil de GitHub (“Johan-rosa/databcrd”), es sencillo de instalar y usar. Su principal propósito es permitir la descarga remota y en tiempo real de datos del Banco Central de la República Dominica. Además, estos datos están adaptados para facilitar su uso en análisis realizados en RStudio.\nCon estos pasos puede utilizar el paquete databcrd:\n\nInstalar el paquete devtools.\nEjecutar en la consola devtools::install_github(\"Johan-rosa/databcrd\", force = TRUE)\n\nLuego de instalar el paquete solo es cargarlo o llamarlo de manera explicita, esta última es la que usaremos en este post para que el lector conozca mejor las funciones.\nVamos a descargar el PIB de República Dominicana, con la función get_pib_gasto , los parámetros determinados son los siguientes:\n\n\nCode\nlibrary(tidyverse)\npib_gasto &lt;- databcrd::get_pib_gasto(\n  modalidad = \"nominal\", \n  acumulado = FALSE, \n  homogenea_91 = FALSE\n)\n\nexportaciones_importaciones &lt;-  pib_gasto |&gt; \n  filter(\n    partida %in% c(\"Exportaciones\", \"Importaciones\")\n  )\n\n\nNos centraremos en las exportaciones e importaciones para nuestro ejercicio de visualización. Crearemos un gráfico sencillo que muestre su evolución, asegurándonos de incluir los elementos básicos que todo gráfico debe tener: un título claro, la fuente de los datos y las etiquetas correspondientes en los ejes.\n\n\nCode\nplot_bas_exp_impor &lt;- exportaciones_importaciones |&gt; \n  ggplot() +\n  geom_line(aes(fecha, pib_nominal, color = partida), size = .7) +\n  labs(title = \"Exportaciones e importaciones en República Dominicana\",\n       subtitle = \"Evolución desde 2007 hasta 2024 en millones de pesos (RD$)\",\n       caption = \"Fuente: BCRD\", color = NULL,\n       y = \"Millones de pesos\", x = \"Periodo\") +\n  theme_minimal()\n\nplot_bas_exp_impor\n\n\n\n\n\nEn el ejemplo anterior realizamos algunos ajustes básicos al gráfico, pero si deseamos presentarlo a nuestro jefe o a un público más exigente, sería conveniente incorporar algunos cambios adicionales para mejorar su claridad y estética.\nPrimero, notamos que el eje y está en notación científica, lo cual puede no ser muy intuitivo para todos los espectadores. Convertirlo a una escala numérica más legible facilitará su interpretación. Además, dado que los datos tienen una frecuencia trimestral, sería ideal ajustar el eje x para reflejar esta periodicidad de manera más precisa.\nPor otro lado, las etiquetas de las series, “Exportaciones” e “Importaciones”, ocupan un espacio considerable en el gráfico. Existen diversas formas de optimizar esto: podemos colocarlas horizontalmente debajo del eje temporal o, como haremos aquí, incluirlas directamente dentro del gráfico para ahorrar espacio y mejorar la organización visual. Finalmente, los colores predeterminados de ggplot2 no siempre son los más elegantes. Cambiar la paleta de colores ayudará a que el gráfico tenga un aspecto más profesional y atractivo.\n\n\nCode\nplot_avance &lt;- plot_bas_exp_impor + \n  scale_y_continuous(labels = scales::comma) + # Manipulando el eje y\n   scale_x_date( # Eje x\n     labels = \\(x) paste0(\"Q\", quarter(x), \"\\n\", year(x)), # Aquí creamos una función anónima para darle un flow personalizado\n     breaks = \"3.5 year\" # Con esta opción manipulamos los brakes de las fechas\n     ) + \n  scale_color_manual(values = c(\"darkblue\", \"gray65\")) + # Cambiando los colores\n  theme(legend.position = \"bottom\", text = element_text(family = \"Georgia\"))\n\nplot_avance\n\n\n\n\n\nPodemos sombrear en el gráfico después del covid, para enfocar la atención a nuestro publico, como ha evolucionado nuestras variables después del periodo de la pandemia.\nPara esto vamos a filtrar nuestra base de datos en la fecha que nos interesa y cambiar la estructura para que sea más fácil hacer el sombreado.\n\n\nCode\ndata_sobrear_2020 &lt;- exportaciones_importaciones |&gt; \n  filter(fecha &gt; \"2020-01-01\") |&gt; \n  select(fecha, partida, pib_nominal) |&gt; \n  tidyr::pivot_wider(\n    names_from = partida,\n    values_from = pib_nominal\n  )\n\n\n\n\nCode\nplot_avance1 &lt;- plot_avance + \n  geom_ribbon(\n    data = data_sobrear_2020,\n    aes(\n      x = fecha, \n      ymin = Exportaciones, \n      ymax = Importaciones\n    ), \n    fill = \"#748cab\",\n    alpha = 0.3\n    \n  )\nplot_avance1\n\n\n\n\n\nHasta ahora, hemos realizado varias mejoras en nuestro gráfico, pero aún podemos optimizar su apariencia. Una forma de hacerlo es colocando las etiquetas de las series directamente dentro del gráfico. Para lograr esto, utilizaremos la función annotate, que nos permite agregar texto personalizado en posiciones específicas del gráfico. Además, podremos ajustar el tamaño, color y posición del texto para que se integre de manera armoniosa con el diseño general.\n\n\nCode\n# En este caso, como debemos probar varias veces, \n# con algunos ajuste hasta que las anotaciones queden organizada,\n# es de gran ayuda crear una función\nanotaciones &lt;- function(x = \"2016-03-01\", y, label, color){\n  ggplot2::annotate(\"text\", \n    x = as.Date(x), y = y, \n    label = label, size = 3.5, \n    colour = color, angle = 15)\n}\n\nplot_avance1 +\n  anotaciones(y = 18e4, label = \"Exportaciones\", color  = \"darkblue\") +\n  anotaciones(y = 28e4, label = \"Importaciones\", color  = \"gray65\") +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "posts/graficos/exportaciones_importaciones_RD.html",
    "href": "posts/graficos/exportaciones_importaciones_RD.html",
    "title": "Gráficos elegantes",
    "section": "",
    "text": "Pocas personas no prefieren dedicarle tiempo a la elegancia de un gráfico a la hora de hacer análisis en `Rstudio`, y lo entiendo, mejorar la estética en un gráfico de rstudio, especialmente con ggplot2, conlleva un tiempo que las personas no quieren perder. En este blog empezare a publicar algunas cambios que podemos hacer en un gráfico, para que puedan utilizar en sus reportes.\n\nlibrary(tidyverse)\npib_gasto &lt;- bcdata::get_pib_gasto() \n\nexportaciones_importaciones &lt;-  pib_gasto |&gt; \n  filter(\n    partida %in% c(\"Exportaciones\", \"Importaciones\")\n  )\n\n\nplot_bas_exp_impor &lt;- exportaciones_importaciones |&gt; \n  ggplot() +\n  geom_line(aes(fecha, monto, color = partida)) +\n  labs(\n    title = \"Exportaciones e importaciones en República Dominicana\",\n    subtitle = \"En millones de pesos (RD$)\",\n    caption = \"Fuente: BCRD\", \n    color = NULL\n  ) +\n  theme_minimal() +\n  theme(axis.title = element_blank())\n\n\nplot_bas_exp_impor"
  },
  {
    "objectID": "posts/graficos/exportaciones_importaciones_RD.html#introducción",
    "href": "posts/graficos/exportaciones_importaciones_RD.html#introducción",
    "title": "Gráficos elegantes",
    "section": "",
    "text": "Pocas personas no prefieren dedicarle tiempo a la elegancia de un gráfico a la hora de hacer análisis en `Rstudio`, y lo entiendo, mejorar la estética en un gráfico de rstudio, especialmente con ggplot2, conlleva un tiempo que las personas no quieren perder. En este blog empezare a publicar algunas cambios que podemos hacer en un gráfico, para que puedan utilizar en sus reportes.\n\nlibrary(tidyverse)\npib_gasto &lt;- bcdata::get_pib_gasto() \n\nexportaciones_importaciones &lt;-  pib_gasto |&gt; \n  filter(\n    partida %in% c(\"Exportaciones\", \"Importaciones\")\n  )\n\n\nplot_bas_exp_impor &lt;- exportaciones_importaciones |&gt; \n  ggplot() +\n  geom_line(aes(fecha, monto, color = partida)) +\n  labs(\n    title = \"Exportaciones e importaciones en República Dominicana\",\n    subtitle = \"En millones de pesos (RD$)\",\n    caption = \"Fuente: BCRD\", \n    color = NULL\n  ) +\n  theme_minimal() +\n  theme(axis.title = element_blank())\n\n\nplot_bas_exp_impor"
  },
  {
    "objectID": "posts/graficos/RD_exportaciones_importaciones.html#footnotes",
    "href": "posts/graficos/RD_exportaciones_importaciones.html#footnotes",
    "title": "Gráficos elegantes",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nPuede echarle un vistazo a su blog personal: https://www.johan-rosa.com/↩︎"
  },
  {
    "objectID": "posts/graficos/RD_exportaciones_importaciones.html#consideraciones",
    "href": "posts/graficos/RD_exportaciones_importaciones.html#consideraciones",
    "title": "Gráficos elegantes",
    "section": "Consideraciones",
    "text": "Consideraciones\nComo mencioné al inicio, realizar este tipo de ajustes en los gráficos puede ser una tarea exigente en términos de tiempo, pero cada mejora vale la pena. La buena noticia es que podemos crear funciones personalizadas que automatizan estos ajustes, lo que nos permitirá ahorrar tiempo en futuros proyectos y producir gráficos más comunicativos de manera eficiente.\nExisten numerosos recursos en Internet que pueden ser de gran utilidad para inspirarnos y aprender sobre distintos tipos de gráficos para nuestros reportes. Además, RStudio ofrece herramientas de ayuda integradas, como el uso del signo de interrogación antes de una función (por ejemplo, ?theme), para consultar la documentación oficial y explorar todas las opciones de personalización disponibles.\nFinalmente, aunque contamos con el apoyo de la inteligencia artificial, es fundamental tener un conocimiento previo que nos permita entender y materializar lo que queremos crear. La IA es una herramienta poderosa para optimizar nuestras tareas, pero no puede sustituir el esfuerzo, la creatividad y el criterio humano necesarios para generar resultados realmente efectivos."
  },
  {
    "objectID": "posts/graficos/RD_exportaciones_importaciones.html#referencias",
    "href": "posts/graficos/RD_exportaciones_importaciones.html#referencias",
    "title": "Gráficos elegantes",
    "section": "Referencias",
    "text": "Referencias\n\nWickham, H., & Grolemund, G. (n.d.). ggplot2: Elegant graphics for data analysis. Recuperado de https://ggplot2-book.org/\nR Graph Gallery. (n.d.). The R graph gallery: Help and inspiration for R charts. Recuperado de https://r-graph-gallery.com/\nBanco Central de la República Dominicana. (n.d.). Datos del Banco Central de la República Dominicana. Recuperado de https://www.bancentral.gov.do/"
  }
]