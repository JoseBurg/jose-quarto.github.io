{
  "hash": "36b430845509b2b1219e1042d6071ce2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Apis Digital Gob\"\nlang: es\nauthor: \"José Burgos\"\ndate: \"2025-07-05\"\ndate-format: medium\ncategories: [\"httr\", \"Apis\", \"combsustibles\"]\nformat:\n  html:\n    toc: true\n    toc-location: right\n    toc-title: Contenido\n    message: false\n    warning: false\n    code-fold: true\n    code-block-bg: true\n    code-summary: \"Show the code\"\n    smooth-scroll: true\n    code-copy: hover\n    highlight-style: github\n---\n\n\n\nEn esta ocacion estaremos descargando los precios de los combustible de República Dominicana desde la apis del portal de datos abiertos del gobierno dominicano. Utilizaremos el paquete `httr` para realizar la petición a la API y la función de `cbind_rows` del paquete `dplyr` para convertir la lista de resultados en un dataframe.\n\nEl precio de los combustible son actualizados cada semana, por lo que la data tiene una frercuencia semanal. El precio esta en pesos dominicanos.\n\n## Que son y como funcionan las Apis?\n\nLas APIs (Application Programming Interfaces) son conjuntos de reglas y protocolos que permiten la comunicación entre diferentes aplicaciones. En el caso de las APIs web, estas permiten que una aplicación pueda solicitar datos a otra aplicación a través de internet.\n\nEn R, las APIs se pueden utilizar para obtener datos de diferentes fuentes, como bases de datos, servicios web, etc. Para utilizar una API en R, se necesita conocer la URL de la API y los parámetros que se deben enviar en la solicitud.\n\n### Función y paquetes\n\nLa función `GET` del paquete `httr` se utiliza para realizar una solicitud HTTP GET a una URL específica. Esta función devuelve un objeto de respuesta que contiene el contenido de la respuesta, el código de estado HTTP y otros metadatos.\n\n**Pasos:**\n\n1.  Instalar y cargar los paquetes necesarios.\n2.  Realizar la solicitud a la API utilizando la función `GET`.\n3.  Extraer el contenido de la respuesta utilizando la función `content`.\n4.  Acceder a los datos específicos de la respuesta.\n5.  Convertir la respuesta de lista a dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Necesitamos realizar la consulta con la fecha:\ndate <- \"2023-10-01\" # Fecha de los precios de los combustibles\nlink <- paste0(\"https://api.digital.gob.do/v1/fuels?date=\", date)\n\n# Hacemos la solicitud a la API de la DGII\nprecios <- httr::GET(link)\n\n# Extraemos el contenido de la solicitud\nrespuesta <- httr::content(x = precios) # Esto devuelve un objeto de tipo lista\n\n# Accedemos a la sección de datos\nresultados <- respuesta[[\"data\"]] # El resultado es una lista de precios de combustibles\n```\n:::\n\n\n\nEn el código anterior, primero definimos la fecha para la cual queremos obtener los precios de los combustibles. Luego, construimos la URL de la API utilizando esa fecha. A continuación, utilizamos la función `GET` del paquete `httr` para realizar la solicitud a la API. Finalmente, extraemos el contenido de la respuesta y accedemos a los datos específicos que nos interesan.\n\nEl resultado es una lista con la siguiente estructura:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresultados[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$id\n[1] 15811\n\n$name\n[1] \"Gasolina Premium\"\n\n$code\n[1] \"PGACU00\"\n\n$currency\n[1] \"DOP\"\n\n$price\n[1] \"293.10\"\n\n$date\n[1] \"2023-09-30\"\n```\n\n\n:::\n:::\n\n\n\nLa lista contiene información sobre los precios de diferentes combustibles, incluyendo el nombre del combustible, el precio por galón y la fecha de actualización.\n\nAhora convertiremos esta lista en un dataframe para facilitar su análisis. Utilizaremos la función `bind_rows` del paquete `dplyr` para combinar los elementos de la lista en un único dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombustibles <- dplyr::bind_rows(resultados) # Convertimos la lista en un dataframe\n\ncombustibles |> \n  dplyr::glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 19\nColumns: 6\n$ id       <int> 15811, 15812, 15813, 15814, 15815, 15816, 15817, 15818, 15819…\n$ name     <chr> \"Gasolina Premium\", \"Gasolina Regular\", \"Gasoil Regular\", \"Ga…\n$ code     <chr> \"PGACU00\", \"PGAIX00\", \"POAEE00\", NA, NA, NA, NA, \"AATGZ00\", \"…\n$ currency <chr> \"DOP\", \"DOP\", \"DOP\", \"DOP\", \"DOP\", \"DOP\", \"DOP\", \"DOP\", \"DOP\"…\n$ price    <chr> \"293.10\", \"274.50\", \"221.60\", \"253.26\", \"247.58\", \"253.26\", \"…\n$ date     <chr> \"2023-09-30\", \"2023-09-30\", \"2023-09-30\", \"2023-09-30\", \"2023…\n```\n\n\n:::\n:::\n\n\n\nSi queremos pasar a un nivel más avanzados, creamos una función que nos permita obtener los precios de los combustibles para cualquier fecha que le indiquemos. Más allá podemos descargar un histórico de precios de los combustibles.\n\n#### Creando una función para obtener precios de combustibles\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_combustibles <- function(date) {\n  link <- paste0(\"https://api.digital.gob.do/v1/fuels?date=\", date)\n  \n  precios <- httr::GET(link)\n  respuesta <- httr::content(x = precios)\n  resultados <- respuesta[[\"data\"]]\n  combustibles <- dplyr::bind_rows(resultados)\n  \n  return(combustibles)\n}\n```\n:::\n\n\n\nUtilizaremos la función `get_combustibles` para obtener los precios de los combustibles desde el 1 de enero de 2023 hasta la fecha actual, y luego organizaremos los datos para obtener el precio de la última semana de cada mes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nfechas <- seq(as.Date(\"2019-01-01\"), Sys.Date(), by = \"week\") # Generamos una secuencia de fechas semanales\n\ncombustibles <- lapply(fechas, get_combustibles) # Aplicamos la función a cada fecha\n# Convertimos la lista de dataframes en un único dataframe\nhistorico_fuels <- dplyr::bind_rows(combustibles) # Unimos todos los dataframes en uno solo\n\n# Vamos a obtener el precio de la última semana de cada mes:\ncombustibles_months <- historico_fuels |>\n  mutate(\n    fecha = as.Date(date), # Convertimos la columna fecha a tipo Date\n    price = as.numeric(price) # Convertimos la columna price a tipo numérico\n  ) |> \n  group_by(\n    mes = lubridate::floor_date(fecha, \"month\"),\n    name # Agrupamos por mes y nombre del combustible\n  ) |> \n  slice_tail(n = 1) |> # Obtenemos el precio de la última semana de cada mes\n  ungroup() |> \n  select(-fecha)\n```\n:::\n\n\n\n#### Visualización de los precios de los combustibles\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ncombustibles_months |> \n  filter(stringr::str_detect(name, \"Gasolina Premium|Gasoil Optimo\")) |>\n  ggplot(aes(x = mes, y = price, color = name)) +\n    geom_line() +\n    labs(title = \"Precios de Combustibles en República Dominicana\",\n         x = \"Mes\",\n         y = \"Precio (RD$)\",\n         color = NULL) +\n    theme_minimal() +\n    scale_x_date(date_labels = \"%Y-%m\", date_breaks = \"1 year\") +\n  theme(\n    legend.position = c(.8, 0.5), # Posición de la leyenda\n  )\n```\n\n::: {.cell-output-display}\n![](apis_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n#### Tabla de precios en los últimos años\n\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "apis_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}